setwd("C:/Users/PC/Desktop/Economia_y_Religion/Version_1")
dataset = read_dta("Economia_y_Religion\\Climate_Relig.dta")
library(readxl)
library(haven)
library(dplyr)
dataset = read_dta("Climate_Relig.dta")
View(dataset)
max(dataset$ccps)
dataset$ccps = as.numeric(dataset$ccps)
max(dataset$ccps)
max(dataset$ccps, na.rm = T)
dataset = dataset[order(dataset$ccps),]
cor(dataset$ccps, dataset$CLIMI)
cor(dataset$ccps, dataset$CLIMI,use="complete.obs")
colnames(dataset)
library(Hmisc)
install.packages("corrplot")
library(corrplot)
colnames(dataset)
###########################
## Matriz de correlación ##-------------------------------------------------------------------------------------------------------------------------------------------------
###########################
dataset_index = dataset[c("relpers", "beliefgod",
"impgod", "relattend", "imprel")]
dataset.rcorr = rcorr(as.matrix(dataset_index))
dataset.rcorr
dataset.rcorr$r
dataset.rcorr$P
help(rcorr)
corrplot(dataset.rcorr)
dataset.corr = cor(dataset_index)
dataset.corr
dataset.corr = cor(dataset_index)
dataset.corr
View(dataset_index)
dataset.corr = cor(dataset_index, "complete.obs")
dataset.corr = cor(dataset_index,use = "complete.obs")
dataset.corr
corrplot(dataset.rcorr)
corrplot(dataset.corr)
library(ggplot2)
install.packages("ggcorrplot")
library(ggcorrplot)
# Plot con ggcorrplot
ggcorrplot(dataset.corr)
# Plot con ggcorrplot
ggcorrplot(dataset.corr, method = "circle")
# Plot con ggcorrplot
ggcorrplot(dataset.corr, method = "circle",
type = "lower", lab = T)
# Plot con ggcorrplot
ggcorrplot(dataset.corr, method="square",
type = "lower", lab = T)
# Plot con ggcorrplot
ggcorrplot(dataset.corr, method="square",
type = "upper", lab = T)
# Plot con ggcorrplot
ggcorrplot(dataset.corr, method="square",
type = "full", lab = T)
sx = sd(dataset$relig_indx)
sy = sd(dataset$ccps)
sx
sy
sy = sd(dataset$ccps,na.rm = TRUE)
sy
(-0.45)*(sx/sy)
(-0.29)*(sx/sy)
colnames(dataset)
no.imp = dataset %>% filter(`_mi_m` ==  0)
no.imp
imp <- mice(no.imp, method = "norm.nob", m = 1) # Impute data
library(mice)
install.packages("mice")
library(mice)
no.imp = dataset %>% filter(`_mi_m` ==  0)
# Stochastic regression imputation
imp <- mice(no.imp, method = "norm.nob", m = 1) # Impute data
# Stochastic regression imputation
no.imp = no.imp[c("relpers", "beliefgod",
"impgod", "relattend", "imprel")]
imp <- mice(no.imp, method = "norm.nob", m = 5) # Impute data
data_sto <- complete(imp) # Store data
data_sto
lista_datasets = list()
length(lista_datasets) = 5
lista_datasets[[1]] = complete(imp,1)
lista_datasets[[2]] = complete(imp,2)
lista_datasets[[3]] = complete(imp,3)
lista_datasets[[4]] = complete(imp,4)
lista_datasets[[5]] = complete(imp,5)
lista_datasets
library(readxl)
library(haven)
library(dplyr)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
library(ggcorrplot)
install.packages("ggcorrplot")
library(ggcorrplot)
library(ggplot2)
library(mice)
install.packages("mice")
library(readxl)
library(haven)
library(dplyr)
library(Hmisc)
library(ggcorrplot)
library(ggplot2)
library(mice)
dataset = read_dta("Climate_Relig.dta")
View(dataset)
dataset = read_dta("Climate_Relig.dta")
dataset = read_dta("Climate_Relig.dta")
# Base de datos sin valores imputados
dataset_0 = dataset %>% filter(`_mi_m` ==  0)
# Base de datos con valores imputados (m = 1)
dataset_1 = dataset %>% filter(`_mi_m` ==  1)
###########################
## Matriz de correlación ##-------------------------------------------------------------------------------------------------------------------------------------------------
###########################
dataset_index = dataset[c("relpers", "beliefgod",
"impgod", "relattend", "imprel")]
dataset.rcorr = rcorr(as.matrix(dataset_index))
dataset.corr = cor(dataset_index,use = "complete.obs")
dataset.corr = cor(dataset_index,use = "complete.obs")
# Plot con ggcorrplot
ggcorrplot(dataset.corr, method="square",
type = "full", lab = T)
no.imp = dataset %>% filter(`_mi_m` ==  0)
no.imp
no.imp = dataset %>% filter(`_mi_m` ==  0)
# Stochastic regression imputation
no.imp = no.imp[c("relpers", "beliefgod",
"impgod", "relattend", "imprel")]
View(no.imp)
imp <- mice(no.imp, method = "norm.nob", m = 5) # Impute data
imp <- mice(no.imp, method = "norm.nob", m = 5) # Impute data
lista_datasets = list()
length(lista_datasets) = 5
lista_datasets[[1]] = complete(imp,1)
lista_datasets[[2]] = complete(imp,2)
lista_datasets[[3]] = complete(imp,3)
lista_datasets[[4]] = complete(imp,4)
lista_datasets[[5]] = complete(imp,5)
View(lista_datasets[[1]])
View(imp)
summary(imp)
with(imp, lm(relpers ~ beliefgod + impgod + relattend + imprel))
model_1 = with(imp, lm(relpers ~ beliefgod + impgod + relattend + imprel))
model_1
pool(model_1)
dataset.corr
View(dataset.corr)
model_1 = with(imp, rlm(relpers ~ beliefgod + impgod + relattend + imprel))
library(MASS)
for (variable in vector) {
if (lista_datasets[[1]][]) {
}
}
model_1 = with(imp, rlm(relpers ~ beliefgod + impgod + relattend + imprel))
model_1
output_list = list()
output_list = 5
lista_datasets[[1]]
i = 1
df = lista_datasets[[i]]
df
i = 1
df = lista_datasets[[i]]
j = 1
df[,j]
output_list = list()
output_list = 5
for (i in 1:5) {
df = lista_datasets[[i]]
for (j in 1:ncol(df)) {
for (k in 1:nrow(df)) {
if (df[k,j] > 1) {
df[k,j]  = 1
}
}
}
output_list[[i]] = df
}
i = 1
df = lista_datasets[[i]]
j = 1
k = 1
if (df[k,j] > 1) {
df[k,j]  = 1
}
output_list = list()
output_list = 5
for (i in 1:5) {
print(paste0("list = "), i)
df = lista_datasets[[i]]
for (j in 1:ncol(df)) {
print(paste0("j = "), j)
for (k in 1:nrow(df)) {
print(paste0("k = "), k)
if (df[k,j] > 1) {
df[k,j]  = 1
}
}
}
output_list[[i]] = df
}
df = lista_datasets[[i]]
df
for (k in 1:5) {
lista_dataset[[k]] = lista_datase[[k]] %>% mutate_if(is.numeric,
~1 * (. >= 1))
}
for (k in 1:5) {
lista_dataset[[k]] = lista_dataset[[k]] %>% mutate_if(is.numeric,
~1 * (. >= 1))
}
for (k in 1:5) {
lista_datasets[[k]] = lista_datasets[[k]] %>% mutate_if(is.numeric,
~1 * (. >= 1))
}
lista_datasets
lista_datasets = list()
length(lista_datasets) = 5
lista_datasets[[1]] = complete(imp,1)
lista_datasets[[2]] = complete(imp,2)
lista_datasets[[3]] = complete(imp,3)
lista_datasets[[4]] = complete(imp,4)
lista_datasets[[5]] = complete(imp,5)
lista_datasets
output_list = list()
length(output_list) = 5
for (k in 1:5) {
lista_datasets[[k]][lista_datasets[[k]] > 1] = 1
}
lista_datasets
for (k in 1:5) {
lista_datasets[[k]][lista_datasets[[k]] > 1] = 1
lista_datasets[[k]][lista_datasets[[k]] < 0] = 0
}
colnames(dataset)
imp
model = with(imp, rlm(relpers ~ beliefgod + impgod + relattend + imprel))
pool(model_1)
pool(model)
model_pool = pool(model)
View(model_pool)
pool(model)
model = with(imp, rlm(relpers ~ beliefgod + impgod + relattend + imprel))
model_pool = pool(model)
View(model_pool)
View(model_pool)
model = with(imp, rlm(relpers ~ beliefgod + impgod + relattend + imprel))
model$call
model$analyses
model_1 = model$analyses[[1]]
model_1
model_1$coefficients
model_1$residuals
model_1$w
model_1$model
summary(model_1)
datlist = miceadds::mids2datlist(imp)
#################
## Regresiones ##
#################
install.packages("miceadds")
library(miceadds)
datlist = miceadds::mids2datlist(imp)
datlist
model = with(imp, rlm(relpers ~ beliefgod + impgod + relattend + imprel))
model_1 = model$analyses[[1]]
model_1
summary(model_1)
model2 = with(datlist, rlm(relpers ~ beliefgod + impgod + relattend + imprel),
)
model2
install.packages("sandwich")
library(sandwich)
betas = lapply(model2, coef)
betas
vars = lapply(model2,
FUN = function(x){vcovCL(x, cluster = datlist[[1]]$relpers)})
vars
summary(pool_mi(beta, vars))
betas = lapply(model2, coef)
vars = lapply(model2,
FUN = function(x){vcovCL(x, cluster = datlist[[1]]$relpers)})
summary(pool_mi(beta, vars))
summary(pool_mi(betas, vars))
vars = lapply(model2,
FUN = function(x){vcovCL(x, cluster = datlist[[1]]$beliefgod)})
summary(pool_mi(betas, vars))
vars = lapply(model2,
FUN = function(x){vcovCL(x, cluster = datlist[[1]]$relattend)})
model2 = with(imp, rlm(relpers ~ beliefgod + impgod + relattend + imprel),
)
pool(model2)
summary(pool_mi(betas, vars))
options(scipen = 9999)
dataset_rbind = rbind(lista_datasets[[1]],
lista_datasets[[2]],
lista_datasets[[3]]],
lista_datasets[[4]], lista_datasets[[5]])
imp$data
imp$imp$relpers
imp$where
complete(imp,4)
complete(imp,4) = complete(imp,4)
complete(imp,4)
